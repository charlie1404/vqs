version: '3.8'

services:
  vqs:
    build:
      context: .
      dockerfile: Dockerfile.local
    init: true
    image: vqs-app
    container_name: vqs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`localhost`)"
      - "traefik.http.routers.app.service=vqs"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.vqs.loadbalancer.server.port=3344"
    ports:
      - "3344:3344"
      - "1337:1337"
    volumes:
      - ./config:/app/config
      - ./internal:/app/internal
      - ./Makefile:/app/Makefile
      - ./main.go:/app/main.go
    command: ["-log-prefix=false", "--build=make build", "-command=./bin/vqs"]
    restart: on-failure
    networks:
      - vqs-network

  parca:
    image: ghcr.io/parca-dev/parca:v0.17.0
    container_name: vqs-parca
    restart: unless-stopped
    ports:
      - 7070:7070
    command:
      - /parca
      - --log-level=info
      - --http-address=:7070
      - --config-path=/parca.yml
      - --cors-allowed-origins=*
    volumes:
      - ./config/parca.yml:/parca.yml
    networks:
      - vqs-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    command: ["--store_container_labels=false"]
    volumes:
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      # - /var/run:/var/run:ro
      # - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    networks:
      - vqs-network

  prometheus:
    image: prom/prometheus:latest
    container_name: vqs-prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - ./config/prom/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus # we do not need dedicated volume for prometheus, but good to have it (commente out if not needed)
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --storage.tsdb.retention.time=72h
      - --web.enable-lifecycle
    networks:
      - vqs-network

  grafana:
    image: grafana/grafana:latest
    container_name: vqs-grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_NAME: "Main Org."
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/vqs-dashboard.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - vqs-network

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  vqs-network:
